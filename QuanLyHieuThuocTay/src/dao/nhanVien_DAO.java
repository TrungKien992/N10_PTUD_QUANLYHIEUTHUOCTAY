package dao;

import connectDB.ConnectDB;
import entity.ChucVu;
import entity.NhanVien;
import entity.TaiKhoan;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class nhanVien_DAO {

    // === B·ªî SUNG QUAN TR·ªåNG: L·∫•y nh√¢n vi√™n theo m√£ ===
    /**
     * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt nh√¢n vi√™n d·ª±a v√†o m√£ nh√¢n vi√™n.
     * R·∫•t c·∫ßn thi·∫øt cho ch·ª©c nƒÉng "Xem chi ti·∫øt" v√† t·∫£i d·ªØ li·ªáu cho c√°c ƒë·ªëi t∆∞·ª£ng kh√°c.
     * @param maNV M√£ nh√¢n vi√™n c·∫ßn t√¨m.
     * @return m·ªôt ƒë·ªëi t∆∞·ª£ng NhanVien ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
     */
    public NhanVien getNhanVienTheoMa(String maNV) {
        String sql = "SELECT nv.*, cv.tenChucVu, tk.tenTK " +
                     "FROM NhanVien nv " +
                     "JOIN ChucVu cv ON nv.chucVu = cv.maChucVu " +
                     "JOIN TaiKhoan tk ON nv.maTK = tk.maTK " +
                     "WHERE nv.maNV = ?";
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            
            ps.setString(1, maNV);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return mapNhanVien(rs);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // === Th√™m nh√¢n vi√™n ===
    public boolean insertNhanVien(NhanVien nv) {
        if (nv.getMaNV() == null || nv.getMaNV().isEmpty()) {
            nv.setMaNV(generateNewMaNV()); // üëà t·ª± ƒë·ªông sinh m√£ n·∫øu ch∆∞a c√≥
        }

        String sql = "INSERT INTO NhanVien(maNV, tenNV, ngaySinh, gioiTinh, chucVu, sdt, diaChi, anh, maTK) "
                   + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setString(1, nv.getMaNV());
            ps.setString(2, nv.getTenNV());
            ps.setDate(3, java.sql.Date.valueOf(nv.getNgaySinh()));
            ps.setString(4, nv.getGioiTinh());
            ps.setString(5, nv.getChucVu().getMaChucVu());
            ps.setString(6, nv.getSoDienThoai());
            ps.setString(7, nv.getDiaChi());
            ps.setString(8, nv.getAnh());
            ps.setString(9, nv.getTaiKhoan().getMaTK());
            System.out.println(">> maTK ch√®n v√†o NhanVien: " + nv.getTaiKhoan().getMaTK());

            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }


    // === C·∫≠p nh·∫≠t nh√¢n vi√™n ===
    public boolean updateNhanVien(NhanVien nv) {
        String sql = "UPDATE NhanVien SET tenNV=?, ngaySinh=?, gioiTinh=?, chucVu=?, sdt=?, diaChi=?, anh=?, maTK=? WHERE maNV=?";
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setString(1, nv.getTenNV());
            ps.setDate(2, java.sql.Date.valueOf(nv.getNgaySinh()));
            ps.setString(3, nv.getGioiTinh());
            ps.setString(4, nv.getChucVu().getMaChucVu());
            ps.setString(5, nv.getSoDienThoai());
            ps.setString(6, nv.getDiaChi());
            ps.setString(7, nv.getAnh());
            ps.setString(8, nv.getTaiKhoan().getMaTK());
            ps.setString(9, nv.getMaNV());

            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // === X√≥a nh√¢n vi√™n ===
    public boolean deleteNhanVien(String maNV) {
        String sql = "DELETE FROM NhanVien WHERE maNV=?";
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, maNV);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // === L·∫•y danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n ===
    public List<NhanVien> getAllNhanVien() {
        List<NhanVien> list = new ArrayList<>();
        // C·∫¢I TI·∫æN: D√πng JOIN ƒë·ªÉ l·∫•y th√™m T√™n Ch·ª©c V·ª• v√† T√™n T√†i Kho·∫£n
        String sql = "SELECT nv.*, cv.tenChucVu, tk.tenTK " +
                     "FROM NhanVien nv " +
                     "JOIN ChucVu cv ON nv.chucVu = cv.maChucVu " +
                     "JOIN TaiKhoan tk ON nv.maTK = tk.maTK";
        try (Connection con = ConnectDB.getConnection();
             Statement st = con.createStatement();
             ResultSet rs = st.executeQuery(sql)) {

            while (rs.next()) {
                list.add(mapNhanVien(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // === T√¨m ki·∫øm nh√¢n vi√™n (t√™n, sƒët, gi·ªõi t√≠nh, ch·ª©c v·ª•, ƒë·ªãa ch·ªâ) ===
    public List<NhanVien> searchNhanVien(String tenNV, String sdt, String gioiTinh, String maChucVu, String diaChi) {
        List<NhanVien> list = new ArrayList<>();
        // C·∫¢I TI·∫æN: D√πng JOIN v√† t√¨m ki·∫øm theo LIKE
        String sql = "SELECT nv.*, cv.tenChucVu, tk.tenTK " +
                     "FROM NhanVien nv " +
                     "JOIN ChucVu cv ON nv.chucVu = cv.maChucVu " +
                     "JOIN TaiKhoan tk ON nv.maTK = tk.maTK " +
                     "WHERE nv.tenNV LIKE ? AND nv.sdt LIKE ? AND nv.gioiTinh LIKE ? AND nv.chucVu LIKE ? AND nv.diaChi LIKE ?";
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setString(1, "%" + tenNV + "%");
            ps.setString(2, "%" + sdt + "%");
            ps.setString(3, "%" + gioiTinh + "%");
            ps.setString(4, "%" + maChucVu + "%");
            ps.setString(5, "%" + diaChi + "%");

            try (ResultSet rs = ps.executeQuery()) {
                 while (rs.next()) {
                    list.add(mapNhanVien(rs));
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // === √Ånh x·∫° d·ªØ li·ªáu t·ª´ ResultSet sang ƒë·ªëi t∆∞·ª£ng NhanVien ===
    private NhanVien mapNhanVien(ResultSet rs) throws SQLException {
        NhanVien nv = new NhanVien();
        nv.setMaNV(rs.getString("maNV"));
        nv.setTenNV(rs.getString("tenNV"));
        nv.setNgaySinh(rs.getDate("ngaySinh").toLocalDate());
        nv.setGioiTinh(rs.getString("gioiTinh"));
        nv.setSoDienThoai(rs.getString("sdt"));
        nv.setDiaChi(rs.getString("diaChi"));
        nv.setAnh(rs.getString("anh"));

        // C·∫¢I TI·∫æN: L·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin cho ChucVu v√† TaiKhoan
        ChucVu cv = new ChucVu();
        cv.setMaChucVu(rs.getString("chucVu"));
        cv.setTenChucVu(rs.getString("tenChucVu")); // L·∫•y t√™n ch·ª©c v·ª• t·ª´ JOIN
        nv.setChucVu(cv);

        TaiKhoan tk = new TaiKhoan();
        tk.setMaTK(rs.getString("maTK"));
        tk.setTenTK(rs.getString("tenTK")); // L·∫•y t√™n t√†i kho·∫£n t·ª´ JOIN
        nv.setTaiKhoan(tk);

        return nv;
    }
    
    // === Sinh m√£ nh√¢n vi√™n t·ª± ƒë·ªông, kh√¥ng tr√πng ===
    public String generateNewMaNV() {
        String prefix = "NV";
        String sql = "SELECT TOP 1 maNV FROM NhanVien ORDER BY maNV DESC";
        try (Connection con = ConnectDB.getConnection();
             Statement st = con.createStatement();
             ResultSet rs = st.executeQuery(sql)) {
            if (rs.next()) {
                String lastID = rs.getString("maNV"); // VD: NV007
                int number = Integer.parseInt(lastID.replace(prefix, ""));
                number++;
                return String.format("%s%03d", prefix, number);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return prefix + "001"; // n·∫øu b·∫£ng ƒëang r·ªóng
    }
 // === H√ÄM L·∫§Y ƒê∆Ø·ªúNG D·∫™N ·∫¢NH THEO M√É NH√ÇN VI√äN ===
    public String layDuongDanAnhTheoMa(String maNV) {
        String duongDanAnh = null;
        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            con = ConnectDB.getConnection(); // d√πng c√°ch g·ªçi th·ªëng nh·∫•t
            String sql = "SELECT anh FROM NhanVien WHERE maNV = ?";
            stmt = con.prepareStatement(sql);
            stmt.setString(1, maNV);
            rs = stmt.executeQuery();

            if (rs.next()) {
                duongDanAnh = rs.getString("anh"); // ‚úÖ ƒë√∫ng v·ªõi t√™n c·ªôt trong DB
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return duongDanAnh;
    }
    public String getTenNhanVienByMaTK(String maTK) {
        String tenNV = null;
        Connection con = ConnectDB.getConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        // Gi·∫£ s·ª≠ b·∫£ng NhanVien c√≥ c·ªôt maTK l√† kh√≥a ngo·∫°i tham chi·∫øu ƒë·∫øn TaiKhoan
        String sql = "SELECT tenNV FROM NhanVien WHERE maTK = ?";
        try {
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, maTK);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                tenNV = rs.getString("tenNV");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
             try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return tenNV;
    }


}